// tb_col2 est égal à 100
db.tb_mdemo1.find({ tb_col2: { $eq: 100 } })

// tb_col2 est supérieur à 100
db.tb_mdemo1.find({ tb_col2: { $gt: 100 } })

// tb_col2 est supérieur ou égal à 100
db.tb_mdemo1.find({ tb_col2: { $gte: 100 } })

// tb_col2 est inférieur à 200
db.tb_mdemo1.find({ tb_col2: { $lt: 200 } })

// tb_col2 est inférieur ou égal à 200
db.tb_mdemo1.find({ tb_col2: { $lte: 200 } })

// tb_col2 n'est pas égal à 150
db.tb_mdemo1.find({ tb_col2: { $ne: 150 } })

// tb_col2 est dans la liste [100, 150, 200]
db.tb_mdemo1.find({ tb_col2: { $in: [100, 150, 200] } })

// tb_col2 n'est pas dans la liste [100, 150, 200]
db.tb_mdemo1.find({ tb_col2: { $nin: [100, 150, 200] } })

// Soit tb_col2 est égal à 100, soit tb_col3 est égal à 150
db.tb_mdemo1.find({ $or: [{ tb_col2: 100 }, { tb_col3: 150 }] })

// tb_col2 est à la fois supérieur à 100 et inférieur à 200
db.tb_mdemo1.find({ $and: [{ tb_col2: { $gt: 100 } }, { tb_col2: { $lt: 200 } }] })

// tb_col2 n'est pas égal à 150
db.tb_mdemo1.find({ tb_col2: { $not: { $eq: 150 } } })

// Ni tb_col2 est égal à 100, ni tb_col2 est égal à 150
db.tb_mdemo1.find({ $nor: [{ tb_col2: 100 }, { tb_col2: 150 }] })

// Le champ tb_col2 existe
db.tb_mdemo1.find({ tb_col2: { $exists: true } })

// tb_col2 est de type int
db.tb_mdemo1.find({ tb_col2: { $type: "int" } })

// Incrémenter la valeur de tb_col2 de 1 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $inc: { tb_col2: 1 } })

// Multiplier la valeur de tb_col2 par 2 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $mul: { tb_col2: 2 } })

// Renommer le champ tb_col2 en new_col2 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $rename: { "tb_col2": "new_col2" } })

// Définir la valeur de tb_col2 à 150 lors de l'insertion si tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $setOnInsert: { tb_col2: 150 } }, { upsert: true })

// Définir la valeur de tb_col2 à 150 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $set: { tb_col2: 150 } })

// Supprimer le champ tb_col2 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $unset: { tb_col2: "" } })

// Définir la valeur de tb_col2 au minimum entre sa valeur actuelle et 100 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $min: { tb_col2: 100 } })

// Définir la valeur de tb_col2 au maximum entre sa valeur actuelle et 200 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $max: { tb_col2: 200 } })

// Définir la valeur de tb_col5 à la date actuelle pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $currentDate: { tb_col5: true } })

// Ajouter la valeur 6 à tb_col8 (en tant qu'ensemble) pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $addToSet: { tb_col8: 6 } })

// Supprimer le dernier élément du tableau tb_col8 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $pop: { tb_col8: 1 } })

// Supprimer toutes les occurrences des valeurs 2 et 3 du tableau tb_col8 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $pullAll: { tb_col8: [2, 3] } })

// Supprimer toutes les occurrences de la valeur 2 du tableau tb_col8 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $pull: { tb_col8: 2 } })

// Ajouter les valeurs 6, 7 et 8 au tableau tb_col8 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $pushAll: { tb_col8: [6, 7, 8] } })

// Ajouter la valeur 6 au tableau tb_col8 pour les documents où tb_col1 est "String data 1"
db.tb_mdemo1.update({ tb_col1: "String data 1" }, { $push: { tb_col8: 6 } })